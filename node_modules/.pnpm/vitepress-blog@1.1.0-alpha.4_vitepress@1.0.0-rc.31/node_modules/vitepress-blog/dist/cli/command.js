/*! 
 * vitepress-blog v1.1.0-alpha.3
 * (c) yue1123
 * Homepage: https://github.com/yue1123/vitepress-blog
 * Released under the MIT License.
 */
import fs from 'fs/promises';
import { resolve, join } from 'path';
import { Command } from 'commander';
import prompts from 'prompts';
import chalk from 'chalk';
import fg from 'fast-glob';
import { createRequire } from 'module';

const require = createRequire(import.meta.url);
function themeResolver(root) {
  const themeConfigs = fg.sync(["node_modules/@vitepress-blog-theme/**/config.json"], { deep: 2 });
  if (!themeConfigs || themeConfigs && !themeConfigs.length) {
    return console.log(
      chalk.red(
        `You haven't installed any vitepress-blog theme yet, visit https://www.npmjs.com/search?q=%40vitepress-blog-theme and choose your favorite theme to install, then try again`
      )
    );
  }
  return themeConfigs.map((item) => {
    return require(resolve(root, item));
  });
}

function main() {
  const program = new Command();
  const root = process.cwd();
  const guideContent = `---
tags:
  - \u6F14\u793A
  - markdown
---

# hello vitepress blog

[\u53C2\u8003](https://vitepress.vuejs.org/guide/markdown)

## \u6269\u5C55\u8BED\u6CD5

### \u6307\u5B9A\u5C01\u9762\u56FE

\`\`\`md
---
coverImg: xxx
---
\`\`\`

### \u7F6E\u9876

\`\`\`md
---
top: true
---
\`\`\`

### \u6DFB\u52A0 tag

\`\`\`md
---
tags:
  - \u968F\u7B14
---
\`\`\`


### [markdown-it-sub](https://github.com/markdown-it/markdown-it-sub)

C~7~H~14~O~2~

### [markdown-it-sup](https://github.com/markdown-it/markdown-it-sup)

Friday the 13^th^

### [markdown-it-task-lists](https://github.com/revin/markdown-it-task-lists)

- [ ] Homework
- [x] Procrastinating

### \u6570\u5B66\u516C\u5F0F

\u591A\u884C\u516C\u5F0F\u5757\uFF1A

$$
\frac{1}{
  Bigl(sqrt{phi sqrt{5}}-phiBigr) e^{
  \frac25 pi}} = 1+\frac{e^{-2pi}} {1+\frac{e^{-4pi}} {
    1+\frac{e^{-6pi}}
    {1+\frac{e^{-8pi}}{1+cdots}}
  }
}


$$

\u884C\u5185\u516C\u5F0F\uFF1A

\u516C\u5F0F $a^2 + b^2 = color{red}c^2$ \u662F\u884C\u5185\u3002

### UML


\`\`\`dot
digraph example1 {
    1 -> 2132123 -> { 4, 5 };
    1 -> 3 -> { 6, 7 };
}
\`\`\`


### \u811A\u6CE8

\u8FD9\u91CC\u662F\u4E00\u4E2A\u811A\u6CE8\u5F15\u7528[^1]\uFF0C\u8FD9\u91CC\u662F\u53E6\u4E00\u4E2A\u811A\u6CE8\u5F15\u7528[^bignote]\u3002

\`\`\`text
\u8FD9\u91CC\u662F\u4E00\u4E2A\u811A\u6CE8\u5F15\u7528[^1]\uFF0C\u8FD9\u91CC\u662F\u53E6\u4E00\u4E2A\u811A\u6CE8\u5F15\u7528[^bignote]\u3002
[^1]: \u7B2C\u4E00\u4E2A\u811A\u6CE8\u5B9A\u4E49\u3002
[^bignote]: \u811A\u6CE8\u5B9A\u4E49\u53EF\u4F7F\u7528\u591A\u6BB5\u5185\u5BB9\u3002

    \u7F29\u8FDB\u5BF9\u9F50\u7684\u6BB5\u843D\u5305\u542B\u5728\u8FD9\u4E2A\u811A\u6CE8\u5B9A\u4E49\u5185\u3002

    \`\`\`
    \u53EF\u4EE5\u4F7F\u7528\u4EE3\u7801\u5757\u3002
    \`\`\`

    \u8FD8\u6709\u5176\u4ED6\u884C\u7EA7\u6392\u7248\u8BED\u6CD5\uFF0C\u6BD4\u5982**\u52A0\u7C97**\u548C[\u94FE\u63A5](https://b3log.org)\u3002
\`\`\`

[^1]: \u7B2C\u4E00\u4E2A\u811A\u6CE8\u5B9A\u4E49\u3002
[^bignote]:
    \u811A\u6CE8\u5B9A\u4E49\u53EF\u4F7F\u7528\u591A\u6BB5\u5185\u5BB9\u3002
    \u7F29\u8FDB\u5BF9\u9F50\u7684\u6BB5\u843D\u5305\u542B\u5728\u8FD9\u4E2A\u811A\u6CE8\u5B9A\u4E49\u5185\u3002

    \`\`\`text
    \u53EF\u4EE5\u4F7F\u7528\u4EE3\u7801\u5757\u3002
    \`\`\`

    \u8FD8\u6709\u5176\u4ED6\u884C\u7EA7\u6392\u7248\u8BED\u6CD5\uFF0C\u6BD4\u5982**\u52A0\u7C97**\u548C[\u94FE\u63A5](https://b3log.org)\u3002`;
  const installedTheme = themeResolver(root);
  if (!installedTheme)
    return;
  program.name("vitepress-blog").description("Expand vitepress for ssg blog").version("1.1.0-alpha.3", "-v, --version", "output the current version");
  program.command("init").arguments("rootPath").description("Init vitepress-blog site root folder and must files.").option("-r --regenerate", "Regenerate site root folder and must files.").action(async (_rootPath, { regenerate }) => {
    async function fsExists(path) {
      try {
        await fs.access(path, 0);
      } catch (e) {
        return false;
      }
      return true;
    }
    async function addCommandToPackageJson(sitePath) {
      const path = resolve(root, "package.json");
      let content = "{}";
      if (await fsExists(path)) {
        content = (await fs.readFile(path, { encoding: "utf-8" })).toString();
      }
      const indent = content.match(/(\x20+)/)?.[1]?.length || 4;
      const obj = JSON.parse(content);
      obj.scripts = Object.assign(obj.scripts || {}, {
        "blog:dev": `vitepress dev ${sitePath}`,
        "blog:build": `vitepress build ${sitePath}`,
        "blog:serve": `vitepress serve ${sitePath}`
      });
      await fs.writeFile(path, JSON.stringify(obj, null, indent), { encoding: "utf-8" });
    }
    function getThemeConfigTask(theme2) {
      let themePagesFileTasks = [];
      let nav = [];
      if (theme2) {
        const pages = theme2.pages || [];
        themePagesFileTasks = pages.map((item) => {
          nav.push(`{ text: "${item.title}", link: "${item.link}" }`);
          return {
            filePath: getPath(`./site/${item.name}.md`),
            content: `---
aside: ${item.aside?.toString()}
title: ${item.title}
---

<${item.componentName} />
      `
          };
        });
        return { themePagesFileTasks, nav: nav.join(", ") };
      } else {
        throw new Error(`\u2718 Error: make sure ${theme2} has exported pages`);
      }
    }
    function getThemeList(themes) {
      return themes.map((item) => {
        const { name: name2, previewLink, description } = item;
        return {
          title: name2,
          description: `${description} ${previewLink}`,
          value: item
        };
      });
    }
    const rootPath = resolve(root, _rootPath);
    const isRootPathExist = _rootPath === "./" || await fsExists(_rootPath);
    const getPath = (path) => join(rootPath, path);
    const taskList = [
      {
        filePath: getPath("./site/posts/hello-vitepress-blog.md"),
        content: guideContent
      }
    ];
    const { lang, theme, title, addCommand, name } = await prompts(
      [
        {
          type: "text",
          name: "title",
          message: "What's the name of your project ?"
        },
        {
          type: "text",
          name: "name",
          message: "What's your github name ?"
        },
        {
          type: "select",
          name: "theme",
          message: "Pick blog theme",
          choices: getThemeList(installedTheme)
        },
        {
          type: "select",
          name: "lang",
          message: "Pick language of configuration file",
          choices: [
            { title: "JavaScript", value: "mjs" },
            { title: "TypeScript", value: "mts" }
          ]
        },
        {
          type: "confirm",
          name: "addCommand",
          message: `Would you like to add start,build,preview commands to 'package.json' ?`,
          initial: true
        }
      ],
      {
        onCancel() {
          console.log(chalk.red("Cancel initial."));
        }
      }
    );
    try {
      if (!lang || !theme || !title)
        return;
      taskList.unshift.apply(taskList, [
        {
          async before() {
            const path2 = getPath(`./.vitepress/theme`);
            if (!await fsExists(path2)) {
              await fs.mkdir(path2, { recursive: true });
            }
          },
          filePath: getPath(`./.vitepress/theme/index.${lang.replace("m", "")}`),
          content: `import { ${theme.name} as theme } from '@vitepress-blog-theme/${theme.name}'

export default theme
`
        }
      ]);
      const { themePagesFileTasks, nav } = getThemeConfigTask(theme);
      taskList.push.apply(taskList, themePagesFileTasks);
      taskList.push({
        async before() {
          const path2 = getPath(`./.vitepress`);
          if (!await fsExists(path2)) {
            await fs.mkdir(path2);
          }
        },
        filePath: getPath(`./.vitepress/config.${lang}`),
        content: `import { defineConfig } from 'vitepress-blog'

export default defineConfig({
  srcDir: '${_rootPath}/site',
  title: '${title}',
  themeConfig: {
    name: '${name}',
    nav: [${nav}],
    socialLinks: [
      { icon: 'github', link: 'https://github.com/${name}' },
    ],
    filePathToTags: [
      {
        test: /\\/notes\\//,
        tag: '\u968F\u7B14'
      }
    ],
    sortBy: 'CREATE_TIME',
    footer: {
      copyright: 'Copyright \xA9 2023-present ${name}'
    }
  }
})
`
      });
      if (!isRootPathExist) {
        await fs.mkdir(rootPath, { recursive: true });
      }
      const path = getPath("./site/posts/");
      if (!await fsExists(path)) {
        await fs.mkdir(path, { recursive: true });
      }
      let existedCount = 0;
      const taskPromises = taskList.map(async (item) => {
        if (item.before)
          await item.before();
        if (regenerate || !await fsExists(item.filePath)) {
          return fs.writeFile(item.filePath, item.content, { encoding: "utf-8" }).then((res) => {
            regenerate ? console.log(chalk.green(`${item.filePath} is regenerated.`)) : console.log(chalk.green(`File ${item.filePath} is created.`));
          });
        } else {
          existedCount += 1;
          console.log(chalk.dim(`${item.filePath} is existed, skip creation.`));
        }
      });
      if (addCommand) {
        taskPromises.push(addCommandToPackageJson(_rootPath).then());
      }
      Promise.all(taskPromises).then(() => {
        console.log("\n");
        console.log("Initial completion.");
        if (existedCount > 0) {
          console.log(
            `${chalk.blue(
              "\u2139"
            )} If you want to regenerate these existed files, add \`-r\` or \`--regenerate\` to regenerate.`
          );
        }
        if (addCommand) {
          console.log(`${chalk.blue("\u2139")} Run \`npm run blog:dev\` to start blog`);
        } else {
          console.log(
            `${chalk.blue(
              "\u2139"
            )} Add \`vitepress dev ${_rootPath}\` scripts to \`${_rootPath}package.json\` and run it to start blog`
          );
        }
      }).catch((err) => {
        console.error(chalk.red("\u2718 Initial fail."));
        console.error(err);
      });
    } catch (error) {
      console.error(chalk.red("\u2718 Initial fail."));
      console.error(error);
    }
  });
  program.parse();
}
main();
