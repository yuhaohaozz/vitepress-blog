/*! 
 * vitepress-blog v1.1.0-alpha.3
 * (c) yue1123
 * Homepage: https://github.com/yue1123/vitepress-blog
 * Released under the MIT License.
 */
import { spawn } from 'cross-spawn';
import { frontmatterReg, snippetsReg, imgReg, mdFrontmatter, linkReg } from '../constants/index.js';

function getFileUpdateTime(filePath) {
  return new Promise((resolve, reject) => {
    const child = spawn("git", ["log", "-1", '--pretty=format:"%ci"', filePath]);
    let output = "";
    child.stdout.on("data", (d) => output += String(d));
    child.on("close", () => {
      resolve(+new Date(output));
    });
    child.on("error", reject);
  });
}
function getFileCreateTime(filePath) {
  return new Promise((resolve, reject) => {
    const child = spawn("git", ["log", '--pretty=format:"%ci"', "--", filePath, "| tail -1"]);
    let output = "";
    child.stdout.on("data", (d) => {
      output = String(d);
    });
    child.on("close", () => {
      resolve(+new Date(output));
    });
    child.on("error", reject);
  });
}
function appendFrontmatter(code, data) {
  const res = code.match(frontmatterReg);
  let frontmatterEndIndex = 0;
  let frontmatterOpenContent = "";
  if (res && res[0]) {
    frontmatterOpenContent = res[0].replace(/\n---[\s\n]*$/, "");
    frontmatterEndIndex = res[0].length;
  }
  const dataEntry = Object.entries(data);
  const dataFrontmatter = dataEntry.reduce((frontmatterArr, [key, value]) => {
    const hasSameKeyFrontMatter = frontmatterOpenContent.indexOf(key) !== -1;
    const notEmptyArray = Array.isArray(value) && value.length;
    if (!hasSameKeyFrontMatter) {
      typeof value !== "object" && frontmatterArr.push([key, value].join(": "));
      if (notEmptyArray) {
        value.unshift("");
        const _value = value.join("\n  - ");
        frontmatterArr.push(`${key}: ${_value}`);
      }
    } else {
      if (notEmptyArray) {
        const reg = new RegExp(key + "\\s*:\\s*(\\n\\s\\s\\-\\s+(.+))+", "g");
        value.unshift("");
        const _value = value.join("\n  - ");
        frontmatterOpenContent = frontmatterOpenContent.replace(reg, (str) => {
          return str + _value;
        });
      }
    }
    return frontmatterArr;
  }, []).join("\n");
  if (frontmatterEndIndex !== 0) {
    return [frontmatterOpenContent, dataFrontmatter, "---"].join("\n") + code.slice(frontmatterEndIndex);
  } else {
    return ["---", dataFrontmatter, "---", code.slice(frontmatterEndIndex), ""].join("\n");
  }
}
function getSnippets(code, length) {
  return (filterHTMLTag(filterMarkdown(code)).match(snippetsReg)?.join("").slice(0, length) || "") + "...";
}
function filterMarkdown(str) {
  return str.replace(frontmatterReg, "").replace(imgReg, "").replace(mdFrontmatter, "").replace(linkReg, "");
}
function filterHTMLTag(str) {
  if (!str)
    return "";
  return str.replace(/<\/?[^>]*>/g, "").replace(/[|]*\n/, "").replace(/&npsp;/gi, "");
}

export { appendFrontmatter, filterHTMLTag, filterMarkdown, getFileCreateTime, getFileUpdateTime, getSnippets };
