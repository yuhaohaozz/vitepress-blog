/*! 
 * vitepress-blog v1.1.0-alpha.1
 * (c) yue1123
 * Homepage: https://github.com/yue1123/vitepress-blog
 * Released under the MIT License.
 */
import { useData } from 'vitepress';
import { unref, shallowRef, ref, computed, readonly } from 'vue';

const sortByHandleMap = {
  CREATE_TIME: (post1, post2) => {
    return +post2.__pageData.frontmatter.createTime - +post1.__pageData.frontmatter.createTime;
  },
  UPDATE_TIME: (post1, post2) => {
    return +post2.__pageData.frontmatter.updateTime - +post1.__pageData.frontmatter.updateTime;
  },
  RANDOM: () => {
    return Math.random() - Math.random();
  },
  TOP: (post1, post2) => {
    return +!!post2.__pageData.frontmatter.top - +!!post1.__pageData.frontmatter.top;
  }
};
const allPostModule = import.meta.glob("/posts/**/*.md", { eager: true });
function usePostListWithPagination() {
  let postArr = Object.values(allPostModule);
  const themeConfig = unref(useData().theme);
  const { size } = themeConfig.pagination;
  const sortBy = themeConfig.sortBy;
  const allPostList = shallowRef();
  const totalPage = ref(Math.ceil(postArr.length / size));
  const currentPage = ref(1);
  const sort = () => {
    postArr = postArr.sort(sortByHandleMap[sortBy]).sort(sortByHandleMap["TOP"]);
    allPostList.value = postArr.map((item) => {
      const { __pageData: pageData } = item;
      return {
        url: "/" + pageData.relativePath.replace(".md", ""),
        ...pageData.frontmatter
      };
    });
  };
  sort();
  const next = () => {
    if (currentPage.value < totalPage.value)
      currentPage.value += 1;
  };
  const prev = () => {
    if (currentPage.value > 1)
      currentPage.value -= 1;
  };
  const postList = computed(() => {
    const startIndex = (currentPage.value - 1) * size;
    const endIndex = currentPage.value * size;
    return allPostList.value.slice(startIndex, endIndex);
  });
  const prevDisabled = computed(() => currentPage.value === 1);
  const nextDisabled = computed(() => currentPage.value === totalPage.value);
  return {
    /**
     * 下一页
     */
    next,
    /**
     * 下一页
     */
    prev,
    /**
     * 总共页数
     */
    totalPage,
    /**
     * 上一页是否禁用
     */
    prevDisabled,
    /**
     * 下一页是否禁用
     */
    nextDisabled,
    /**
     * 当前页
     */
    currentPage: readonly(currentPage),
    /**
     * 当前分页文章
     */
    postList,
    /**
     * 所有文章
     */
    allPostList
  };
}

export { usePostListWithPagination };
